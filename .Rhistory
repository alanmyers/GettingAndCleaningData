testData$angle(Z,gravityMean)
testData$angle\(Z,gravityMean\)
names(testData)
testData$angle[100,561]
testData$angle[100,560]
testData$angle[100,]
testData$angle[1,1]
testData[1,1]
testData[2,1]
class(testData[2,1])
testData[2,1]
testData[1,1]
testData[1,2]
testData[2,1]
testData[1,1]
testData[1,561]
testData[2,1]
testData[,1]100
testData[100,1]
testData[100,561]
trainDataFile     <- ".\\UCI HAR Dataset\\train\\X_train.txt"
testDataFile      <- ".\\UCI HAR Dataset\\test\\X_test.txt"
trainSubjectFile  <- ".\\UCI HAR Dataset\\train\\y_train.txt"
testSubjectFile   <- ".\\UCI HAR Dataset\\test\\y_test.txt"
colLabelFile      <- ".\\UCI HAR Dataset\\features.txt"
activityLabelFile <- ".\\UCI HAR Dataset\\activity_labels.txt"
nbRows <- 100
trainData      <- read.csv(trainDataFile, sep="", header=FALSE,
strip.white=T, nrows = nbRows)
testData       <- read.csv(testDataFile,  sep="", header=FALSE,
strip.white=T, nrows = nbRows)
trainSubject   <- read.table(trainSubjectFile)
testSubject    <- read.table(testSubjectFile)
colLabels      <- read.table(colLabelFile)
ActivityLabels <- read.table(activityLabelFile)
colnames(testData)  <- as.vector(colLabels$V2)
colnames(trainData) <- as.vector(colLabels$V2)
colLabels
colLabels$V2
grep mean colLabels$V2
?grep
grep (mean, colLabels$V2)
grep (mean, as.vector(colLabels$V2))
grep ("mean", as.vector(colLabels$V2))
grep ("mean", colLabels$V2)
colLabels$V2[1]
colLabels$V2[539]
x <- grep ("mean", colLabels$V2)
y <- grep ("std", colLabels$V2)
46+33
colLabels$V2[4]
colLabels$V2[42]
View(trainData)
?data.frame
?gsub
gsub("\(\)", "", colLabels)
gsub("()", "", colLabels)
x <- gsub("()", "", colLabels)
x
names(x)
x[1]
x <- gsub("()", "", colLabels$V2)
x
x <- gsub("(", "", colLabels$V2)
x <- gsub("\(", "", colLabels$V2)
x <- gsub("\\(", "", colLabels$V2)
x
x <- gsub("\\)", "", x)
x
x <- gsub("\\,", "", x)
x
colLabels      <- read.table(colLabelFile)
colLabels      <- gsub("\\(", "", colLabels$V2)
colLabels      <- gsub("\\(", "", colLabels)
colLabels      <- gsub("\\,", "\\.", colLabels)
collabels
colLabels
colLabels      <- read.table(colLabelFile)
colLabels      <- gsub("\\(", "", colLabels$V2)
colLabels      <- gsub("\\)", "", colLabels)
colLabels      <- gsub("\\,", "\\.", colLabels)
colLabels
colLabels      <- read.table(colLabelFile)
colLabels$V2
colnames(testData)  <- as.vector(colLabels)
colnames(trainData) <- as.vector(colLabels)
names(testData)
colnames(testData)  <- colLabels
colnames(trainData) <- colLabels
View(testData)
colLabels
colLabels$V2
colnames(testData)  <- colLabels$V2
View(testData)
colLabels      <- read.table(colLabelFile)
colLabels      <- gsub("\\(", "", colLabels$V2)
colLabels      <- gsub("\\)", "", colLabels)
colLabels      <- gsub("\\,", "\\.", colLabels)
colLabels
colnames(trainData) <- colLabels
view(trainData)
View(trainData)
head(trainData$tBodyAcc-mean-X)
names(trainData)
trainData$angleZ.gravityMean
trainDataFile     <- ".\\UCI HAR Dataset\\train\\X_train.txt"
testDataFile      <- ".\\UCI HAR Dataset\\test\\X_test.txt"
trainSubjectFile  <- ".\\UCI HAR Dataset\\train\\y_train.txt"
testSubjectFile   <- ".\\UCI HAR Dataset\\test\\y_test.txt"
colLabelFile      <- ".\\UCI HAR Dataset\\features.txt"
activityLabelFile <- ".\\UCI HAR Dataset\\activity_labels.txt"
trainData      <- read.csv(trainDataFile, sep="", header=FALSE,
strip.white=T, nrows = nbRows)
testData       <- read.csv(testDataFile,  sep="", header=FALSE,
strip.white=T, nrows = nbRows)
trainSubject   <- read.table(trainSubjectFile)
testSubject    <- read.table(testSubjectFile)
ActivityLabels <- read.table(activityLabelFile)
# Get rid of the parans and commas in the column names.
#    E.g. angle(tBodyGyroMean,gravityMean)
#    becomes angletBodyGyroMean.gravityMean
#
colLabels      <- read.table(colLabelFile)
colLabels      <- gsub("\\(", "", colLabels$V2)
colLabels      <- gsub("\\)", "", colLabels)
colLabels      <- gsub("\\,", "\\.", colLabels)
colnames(testData)  <- colLabels$V2
colnames(trainData) <- colLabels
View(testData)
View(trainData)
colnames(testData)  <- colLabels
View(testData)
View(testSubject)
View(trainData)
count(y_test)
x <- grep("mean", testData)
grep("mean", testData)
?merge
?dplyr
??dplyr
library(dplyr)
x <- mutate(testData, subjectId = testSubject)
testData$subjectId
grep("subject", colLabels)
class(testSubject)
names(testSubject)
class(testSubject$V1)
head(testSubject$V1)
x <- mutate(testData, subjectId = testSubject$V1)
x <- mutate(testData, subjectIdxxx = testSubject$V1)
?mutate
?cbind
x <- cbind(testData, testSubject$v1)
nrows(testSubject$V1)
trainData      <- read.csv(trainDataFile, sep="", header=FALSE,
strip.white=T, nrows = nbRows)
testData       <- read.csv(testDataFile,  sep="", header=FALSE,
strip.white=T, nrows = nbRows)
trainSubject   <- read.table(trainSubjectFile, nrows= nbRows)
testSubject    <- read.table(testSubjectFile, nrows= nbRows)
ActivityLabels <- read.table(activityLabelFile, nrows= nbRows)
x <- cbind(testData, testSubject$v1)
count(testData)
count(testSubject$V1)
summary(testSubject$V1)
str(testSubject$V1)
?cbind
x <- mutate(testData, subjectIdxxx = testSubject$V1)
head(testSubject$V1)
names(x)
names(testData)
colLabels      <- read.table(colLabelFile)
colLabels      <- gsub("\\(", "", colLabels$V2)
colLabels      <- gsub("\\)", "", colLabels)
colLabels      <- gsub("\\,", "\\.", colLabels)
colnames(testData)  <- colLabels
colnames(trainData) <- colLabels
names(testData)
x <- mutate(testData, subjectIdxxx = testSubject$V1)
str(testSubject)
x <- mutate(testData, subjectIdxxx = as.vector(testSubject$V1))
testSubject$subjectId = as.vector(testSubject$V1)
class(testSubject$subjectId)
head(testSubject$subjectId)
testSubject$subjectId
testSubject$v1
testSubject$V1
testSubject$activityLabelId  <- as.vector(ActivityLabels$V1)
trainSubject$activityLabelId <- as.vector(ActivityLabels$V1)
as.vector(ActivityLabels$V1
)
ActivityLabels$V1
ActivityLabels
grep("activity", names(trainData))
View(testData)
names(testData)
grep("class", names(testData))
grep"angle", names(testData)
grep("angle", names(testData)
)
trainDataFile     <- ".\\UCI HAR Dataset\\train\\X_train.txt"
testDataFile      <- ".\\UCI HAR Dataset\\test\\X_test.txt"
trainLabelFile    <- ".\\UCI HAR Dataset\\train\\y_train.txt"
testLabelFile     <- ".\\UCI HAR Dataset\\test\\y_test.txt"
colLabelFile      <- ".\\UCI HAR Dataset\\features.txt"
activityLabelFile <- ".\\UCI HAR Dataset\\activity_labels.txt"
trainData      <- read.csv(trainDataFile, sep="", header=FALSE,
strip.white=T, nrows = nbRows)
testData       <- read.csv(testDataFile,  sep="", header=FALSE,
strip.white=T, nrows = nbRows)
trainLabel     <- read.table(trainLabelFile, nrows= nbRows)
testLabel      <- read.table(testLabelFile, nrows= nbRows)
ActivityLabels <- read.table(activityLabelFile, nrows= nbRows)
# Get rid of the parans and commas in the column names.
#    E.g. angle(tBodyGyroMean,gravityMean)
#    becomes angletBodyGyroMean.gravityMean
#
colLabels      <- read.table(colLabelFile)
colLabels      <- gsub("\\(", "", colLabels$V2)
colLabels      <- gsub("\\)", "", colLabels)
colLabels      <- gsub("\\,", "\\.", colLabels)
# Add in the column Names
colnames(testData)  <- colLabels
colnames(trainData) <- colLabels
testSubject$activityLabelId  <- as.vector(testLabel$V1)
trainSubject$activityLabelId <- as.vector(trainlabel$V1)
trainSubject$activityLabelId <- as.vector(trainLabel$V1)
names(trainData)
testData$activityLabelId  <- as.vector(testLabel$V1)
trainData$activityLabelId <- as.vector(trainLabel$V1)
names(trainData)
trainData$activityLabelId
ActivityLabels
names(AcivityLabels) <- "Id", "Name"
names(AcivityLabels) <- c("Id", "Name")
names(ActivityLabels) <- c("Id", "Name")
ActivityLabels
$id = 1
id = 1
ActivityLabels[1]
ActivityLabels$Name[1]
x <- mutate(testData, name = ActivityLabels[activityLabelId])
x <- mutate(testData, xxxname = ActivityLabels[activityLabelId])
x <- AcitivtyLabels[testData$activityLabelId]
x <- ActivityLabels[testData$activityLabelId]
x <- ActivityLabels[testData$activityLabelId]
trainData$activityLabelId
ActivityLabels[testData$activityLabelId]
returnName <- function(lup, idx) { lup[idx]}
returnName(ActivityLabels, 1)
names(ActivityLabels)
returnName <- function(lup, idx) { lup$Name[idx]}
x <- returnmame(1)
x <- returnmame(ActivityLabels,1)
x <- returnName(ActivityLabels,1)
x
returnName(ActivityLabels,1)
x <- mutate(testData, newCol = returnName(ActivityLabels, testData$activityLabelId))
x <- cut(testData, breaks=ActivityLabels$Name)
x <- cut(testData, breaks=ActivityLabels$Id)
?lapply
x <- sapply(testData, returnName(AcivityLabels, testData$activityLabelId))
x <- sapply(testData, returnName(ActivityLabels, testData$activityLabelId))
x <- sapply(testData, returnName, ActivityLabels, testData$activityLabelId)
ActivityLabels[1:10]
ActivityLabels$Name[1:10]
ActivityLabels$Name[1:6]
ActivityLabels$Name[1,1]
ActivityLabels$Name[1]
ActivityLabels$Name[2]
x <- sapply(testData, returnName, ActivityLabels, testData$activityLabelId)
s <- c(1,1,2,2,3,3,1,2,3)
lookup <- data.frame(id=c(1:3), value=("a", "b", "c"))
lookup <- data.frame(id=c(1:3), value=c("a", "b", "c"))
View(lookup)
sapply(s, function(x) lookup$value[x])
s <- data.frame(col1 = c(1,1,2,2,3,3,1,2,3,1),
col2 = c(1:10),
col3 = c(101:110))
sapply(s, function(x) lookup$value[x$col1])
sapply(s, function(x) class(x))
sapply(s, function(x) lookup$value[m$value[x]])
sapply(s, function(x, y) y[, x]], y=lookup$value)
sapply(s, function(x, y) y[, x], y=lookup$value)
sapply(s, function(x, y) y[x], y=lookup$value)
apply(s$id, 1, function(x) lookup$value[x])
apply(s$id, 1, function(id)) lookup$value[id])
apply(s$id, 1, function(id) lookup$value[id])
s$id
s <- data.frame(col1 = c(1,1,2,2,3,3,1,2,3,1),
col2 = c(1:10),
col3 = c(101:110))
apply(s$col1, 1, function(col1)) lookup$value[col1])
apply(s$col1, 1, function(col1) lookup$value[col1])
s$col1
apply(s[, col1], 1, function(x) lookup$value[x])
apply(s[, 'col1'], 1, function(x) lookup$value[x])
s[, 'col1']
apply(s[, 'col1'], 1, function(x) class(x))
dim(s[, 'col1'])
s[, 'col1']
?dim
dat <- data.frame (x=c(1,2), y=c(3,4), z=c(5,6))
apply(dat[,c('x','z')], 1, function(x) sum(x))
app(s[,c('col1')], 1, function(x) class(x))
apply (s[,c('col1')], 1, function(x) class(x))
dim(dat[,c('x','z')])
class(dat$x)
class(s$col1)
View(dat)
View(s)
apply(s[,c('col1')], 1, function(x) lookup$value[x])
dim(s[,c('col1')])
dim(dat[,c('x','z')])
dim(dat[,c('x')])
dim(s[,c('col1','col2')])
dim(s[,'col1'])
?dim
class(s[,'col1'])
class(s[,'col1', 'col2'])
class(s[,c('col1', 'col2'])
dim(s[,c('col1','col2')])
class(s[,c('col1','col2')])
class(s[,c('col1',)])
dim(s[,c('col1','col2')])
dim(s[,c('col1')])
dim(as.data.frame(s[,c('col1')]))
apply(as.data.frame(s[,c('col1')]), 1, function(x) lookup$value[x])
View(ActivityLabels)
apply(as.data.frame(testData[,'activityLabelId']), 1, function(x) ActivityLabels$Name[x])
testData$activityLabelNames  <- apply(as.data.frame(testData[,'activityLabelId']),
1, function(x) ActivityLabels$Name[x])
trainData$activityLabelNames <- apply(as.data.frame(trainData[,'activityLabelId']),
1, function(x) ActivityLabels$Name[x])
View(testData)
testData$activityLabelNames
trainData$activityLabelNames
trainData$activityLabelId[100]
testData$activityLabelId[100]
trainData$activityLabelId[100], testData$activityLabelId[100]
print (sprintf("%d %d", trainData$activityLabelId[100], testData$activityLabelId[100]))
print (sprintf("%d %d", trainData$activityLabelId[id], testData$activityLabelId[id]))
id
for id (1:100) print (sprintf("%d %d", trainData$activityLabelId[id], testData$activityLabelId[id]))
for id in (c(1:100) print (sprintf("%d %d", trainData$activityLabelId[id], testData$activityLabelId[id]))
for (id in c(1:100) print (sprintf("%d %d", trainData$activityLabelId[id], testData$activityLabelId[id]))
for (id in c(1:100)) print (sprintf("%d %d", trainData$activityLabelId[id], testData$activityLabelId[id]))
testData[,'activityLabelId']
trainData[,'activityLabelId']
trainData[79,'activityLabelId']
trainData[79,'activityLabelId']
trainData[79,'activityLabelId']
testData[79,'activityLabelId']
testData[79,'activityLabelName']
testData[79,'activityLabelNames']
class(testData$activityLabelNames)
class(testData$activityLabelNames)
class(testData$activityLabelId)
trainData      <- read.csv(trainDataFile, sep="", header=FALSE,
strip.white=T, nrows = nbRows)
testData       <- read.csv(testDataFile,  sep="", header=FALSE,
strip.white=T, nrows = nbRows)
trainLabel     <- read.table(trainLabelFile, nrows= nbRows)
testLabel      <- read.table(testLabelFile, nrows= nbRows)
ActivityLabels <- read.table(activityLabelFile, nrows= nbRows)
names(ActivityLabels) <- c("Id", "Name")
# Get rid of the parans and commas in the column names.
#    E.g. angle(tBodyGyroMean,gravityMean)
#    becomes angletBodyGyroMean.gravityMean
#
colLabels      <- read.table(colLabelFile)
colLabels      <- gsub("\\(", "", colLabels$V2)
colLabels      <- gsub("\\)", "", colLabels)
colLabels      <- gsub("\\,", "\\.", colLabels)
# Add in the column Names
colnames(testData)  <- colLabels
colnames(trainData) <- colLabels
# Add in the activity labels
testData$activityLabelId  <- as.vector(testLabel$V1)
trainData$activityLabelId <- as.vector(trainLabel$V1)
testData$activityLabelNames  <- as.string(apply(as.data.frame(testData[,'activityLabelId']),
1, function(x) ActivityLabels$Name[x]))
?as.character
testData$activityLabelNames  <- as.character(apply(as.data.frame(testData[,'activityLabelId']),
1, function(x) ActivityLabels$Name[x]))
testData$activityLabelNames
testData$activityLabelNames[79]
testData$activityLabelId[79]
trainData$activityLabelNames <- as.character(apply(as.data.frame(trainData[,'activityLabelId']),
1, function(x) ActivityLabels$Name[x]))
trainData$activityLabelId[79]
trainData$activityLabelName[79]
?rbind
fullData <- rbind(testData, trainData)
View(fullData)
testData[1,1]
testData[100,1]
testData[101,1]
testData[101,]
testData[1,101]
fullData <- rbind(testData, trainData)
trainData[1,1]
trainData[2,1]
remove(testData,trainData)
trainData[2,1]
trainDataFile     <- ".\\UCI HAR Dataset\\train\\X_train.txt"
testDataFile      <- ".\\UCI HAR Dataset\\test\\X_test.txt"
trainLabelFile    <- ".\\UCI HAR Dataset\\train\\y_train.txt"
testLabelFile     <- ".\\UCI HAR Dataset\\test\\y_test.txt"
colLabelFile      <- ".\\UCI HAR Dataset\\features.txt"
activityLabelFile <- ".\\UCI HAR Dataset\\activity_labels.txt"
trainData      <- read.csv(trainDataFile, sep="", header=FALSE,
strip.white=T, nrows = nbRows)
testData       <- read.csv(testDataFile,  sep="", header=FALSE,
strip.white=T, nrows = nbRows)
trainLabel     <- read.table(trainLabelFile, nrows= nbRows)
testLabel      <- read.table(testLabelFile, nrows= nbRows)
ActivityLabels <- read.table(activityLabelFile, nrows= nbRows)
names(ActivityLabels) <- c("Id", "Name")
# Get rid of the parans and commas in the column names.
#    E.g. angle(tBodyGyroMean,gravityMean)
#    becomes angletBodyGyroMean.gravityMean
#
colLabels      <- read.table(colLabelFile)
colLabels      <- gsub("\\(", "", colLabels$V2)
colLabels      <- gsub("\\)", "", colLabels)
colLabels      <- gsub("\\,", "\\.", colLabels)
# Add in the column Names
colnames(testData)  <- colLabels
colnames(trainData) <- colLabels
# Add in the activity labels
testData$activityLabelId  <- as.vector(testLabel$V1)
trainData$activityLabelId <- as.vector(trainLabel$V1)
##  Need to add the names into the testData & trainData frames.
##  1 -> WALKING
testData$activityLabelNames  <- as.character(apply(as.data.frame(testData[,'activityLabelId']),
1, function(x) ActivityLabels$Name[x]))
trainData$activityLabelNames <- as.character(apply(as.data.frame(trainData[,'activityLabelId']),
1, function(x) ActivityLabels$Name[x]))
# Add in the subjects column
testSubject$subjectId  <- as.vector(testSubject$V1)
trainSubject$subjectId <- as.vector(trainSubject$V1)
# Merge Data Sets
fullData <- rbind(testData, trainData)
View(fullData)
?grep
for (n in names(fullData)) {
if (grep("mean|std", n))
{
#DataSet <- cbind(DataSet, fullData[,n]);
print (n)
}
}
for (n in names(fullData)) {
print(sprintf("Checking: n"))
if (grep("mean|std", n))
{
#DataSet <- cbind(DataSet, fullData[,n]);
print ("match\n")
}
}
for (n in names(fullData)) {
print(sprintf("Checking: %s", n))
if (grep("mean|std", n))
{
#DataSet <- cbind(DataSet, fullData[,n]);
print ("match\n")
}
}
DataSet <- data.frame()
cnt <- 0
for (n in names(fullData)) {
cnt++
print(sprintf("Checking(%d): %s", cnt, n))
if (grep("mean|std", n))
{
#DataSet <- cbind(DataSet, fullData[,n]);
print ("match\n")
}
}
class(Cnt)
class(cnt)
cnt
DataSet <- data.frame()
cnt <- 0
for (n in names(fullData)) {
cnt <- cnt + 1
print(sprintf("Checking(%d): %s", cnt, n))
if (grep("mean|std", n))
{
#DataSet <- cbind(DataSet, fullData[,n]);
print ("match\n")
}
}
n <- names(fullData)
n[7]
n
source("run_analysis.R")
run_analysis(100)
names(fullData)
cnt
p n
print(n)
p n
n
sourc("run_analysis.R")
source("run_analysis.R")
run_analysis(100)
run_analysis(100)
p cnt
cnt
print(n)
